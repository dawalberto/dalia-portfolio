---
import type { IconName } from "@/components/Icon.astro"
import Layout from "./Layout.astro"
import Icon from "@/components/Icon.astro"

type ProjectProps = {
  title: string
  titleIcon: IconName
  rol: string
  duration: string
  typeOfProject: string
  tools: string[]
  navItems: { title: string; anchor: string; icon: IconName }[]
}

const { title, titleIcon, rol, duration, typeOfProject, tools, navItems } =
  Astro.props as ProjectProps
---

<Layout>
  <article>
    <header class="flex flex-col font-roboto text-3xl">
      <h1 class="flex gap-4 4k:-ml-12 items-center mt-16 pb-6 font-bold">
        <span><Icon icon={titleIcon} /></span>
        <span>{title}</span>
      </h1>
      <div
        project-info
        class="flex flex-col text-main-0 visible text-xl max-h-52 transform transition-all duration-300 ease-in-out"
      >
        <h2><span class="font-bold">Rol:</span> <span class="opacity-85">{rol}</span></h2>
        <h2>
          <span class="font-bold">Duraci√≥n:</span>
          <span class="opacity-85">{duration}</span>
        </h2>
        <h2>
          <span class="font-bold">Tipo de proyecto:</span>
          <span class="opacity-85">{typeOfProject}</span>
        </h2>
        <h2>
          <span class="font-bold">Herramientas:</span>
          <span class="opacity-85">{tools?.join(", ")}</span>
        </h2>
      </div>
    </header>
    <aside project-aside class="mt-16 transform transition-all duration-300 ease-in-out">
      <nav class="px-4 py-2">
        <ul class="flex flex-col gap-y-4">
          {
            navItems?.map((item) => (
              <li>
                <a href={`#${item.anchor}`} class="flex gap-2 items-center">
                  <span class="flex-none">
                    <Icon icon={item.icon} />
                  </span>
                  {item.title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
    </aside>
    <main project-content class="mt-16 transform transition-all duration-300 ease-in-out">
      <slot />
    </main>
  </article>
</Layout>

<script>
  const projectContentContainer = document.querySelector("[project-content]") as HTMLElement | null
  const projectInfoContainer = document.querySelector("[project-info]") as HTMLElement | null
  const projectAsideContainer = document.querySelector("[project-aside]") as HTMLElement | null

  projectContentContainer?.addEventListener("scroll", () => {
    if (!projectContentContainer || !projectInfoContainer || !projectAsideContainer) return
    const { scrollTop } = projectContentContainer

    if (scrollTop > 125) {
      projectInfoContainer.classList.replace("max-h-52", "max-h-0")
      projectInfoContainer.classList.replace("text-main-0", "text-white")
      projectInfoContainer.classList.replace("visible", "invisible")
      projectContentContainer.classList.replace("mt-16", "mt-0")
      projectAsideContainer.classList.replace("mt-16", "mt-0")
    } else {
      projectInfoContainer.classList.replace("max-h-0", "max-h-52")
      projectInfoContainer.classList.replace("text-white", "text-main-0")
      projectInfoContainer.classList.replace("invisible", "visible")
      projectContentContainer.classList.replace("mt-0", "mt-16")
      projectAsideContainer.classList.replace("mt-0", "mt-16")
    }
  })
</script>

<style>
  article {
    margin: 0;
    height: var(--spacing-full-without-menu); /* Toda la ventana */
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: 200px 1fr; /* Sidebar 200px + body resto */
    grid-template-areas:
      "header header"
      "sidebar body";
  }

  header {
    grid-area: header;
  }

  aside {
    grid-area: sidebar;
    overflow-y: auto; /* Scroll independiente */
  }

  main {
    grid-area: body;
    overflow-y: auto; /* Scroll independiente */
    scroll-behavior: smooth;
    padding-inline: min(20em, 10%);
  }
</style>
