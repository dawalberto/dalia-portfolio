---
import type { IconName } from "@/components/Icon.astro"
import Layout from "./Layout.astro"
import Icon from "@/components/Icon.astro"
import { slide } from "astro:transitions"

type ProjectProps = {
  title: string
  rol: string
  duration: string
  typeOfProject: string
  tools: string[]
  link?: string
  navItems: Map<string, { title: string; icon: IconName }>
}

const { title, rol, duration, typeOfProject, tools, link, navItems } = Astro.props as ProjectProps
---

<Layout>
  <article>
    <header class="flex flex-col font-roboto text-4xl mt-8 border-b border-[#cccccc] pb-9">
      <h1
        transition:animate={slide({
          duration: 300,
        })}
        class="flex gap-4 items-center pb-6 font-bold font-playfair text-main-0"
      >
        <span>{title}</span>
      </h1>
      <div
        project-info
        class="flex flex-col gap-y-2 text-main-0 visible text-xl max-h-52 transform transition-all duration-300 ease-in-out"
      >
        <h2><span class="font-bold">Rol:</span> <span class="opacity-85">{rol}</span></h2>
        <h2>
          <span class="font-bold">Duraci√≥n:</span>
          <span class="opacity-85">{duration}</span>
        </h2>
        <h2>
          <span class="font-bold">Tipo de proyecto:</span>
          <span class="opacity-85">{typeOfProject}</span>
        </h2>
        <h2>
          <span class="font-bold">Herramientas:</span>
          <span class="opacity-85">{tools?.join(", ")}</span>
        </h2>
        {
          link && (
            <h2 class="flex gap-2 items-center w-fit group">
              <span class="group-hover:rotate-180 transform transition-transform duration-300 ease-in-out">
                <Icon icon="link" />
              </span>
              <a
                class="opacity-85 group-hover:text-indigo-800"
                href={`https://${link}`}
                target="_blank"
              >
                {link}
              </a>
            </h2>
          )
        }
      </div>
    </header>
    <aside
      project-aside
      class="font-roboto text-base mt-8 transform transition-all duration-300 ease-in-out"
    >
      <nav class="py-2">
        <ul class="flex flex-col gap-y-1">
          {
            navItems &&
              Array.from(navItems.entries()).map(([key, item]) => (
                <li class="group hover:bg-[#F1F1F1] leading-6 py-3 px-2 rounded-md transform transition duration-200">
                  <a
                    href={`#${key}`}
                    class="flex gap-2 items-start opacity-40 group-hover:opacity-100 group-hover:font-bold"
                  >
                    <span class="flex-none pt-1">
                      <Icon icon={item.icon} />
                    </span>
                    {item.title}
                  </a>
                </li>
              ))
          }
        </ul>
      </nav>
    </aside>
    <main
      project-content
      class="project-content mt-8 pt-4 transform transition-all duration-300 ease-in-out"
    >
      <slot />
    </main>
  </article>
</Layout>

<script>
  const projectContentContainer = document.querySelector("[project-content]") as HTMLElement | null
  const projectInfoContainer = document.querySelector("[project-info]") as HTMLElement | null
  const projectAsideContainer = document.querySelector("[project-aside]") as HTMLElement | null

  projectContentContainer?.addEventListener("scroll", () => {
    if (!projectContentContainer || !projectInfoContainer || !projectAsideContainer) return
    const { scrollTop } = projectContentContainer

    if (scrollTop > 125) {
      projectInfoContainer.classList.replace("max-h-52", "max-h-0")
      projectInfoContainer.classList.replace("text-main-0", "text-white")
      projectInfoContainer.classList.replace("visible", "invisible")
      projectContentContainer.classList.replace("mt-8", "mt-0")
      projectAsideContainer.classList.replace("mt-8", "mt-0")
    } else {
      projectInfoContainer.classList.replace("max-h-0", "max-h-52")
      projectInfoContainer.classList.replace("text-white", "text-main-0")
      projectInfoContainer.classList.replace("invisible", "visible")
      projectContentContainer.classList.replace("mt-0", "mt-8")
      projectAsideContainer.classList.replace("mt-0", "mt-8")
    }
  })

  // Active navItem üëá
  const sections = document.querySelectorAll("main[project-content] section[id]")
  const navLinks = document.querySelectorAll("aside[project-aside] nav a")

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Quitamos "active" de todos
          navLinks.forEach((link) => link.classList.remove("active"))
          // Buscamos el link que apunta a la secci√≥n visible
          const id = entry.target.getAttribute("id")
          const activeLink = document.querySelector(`aside[project-aside] nav a[href="#${id}"]`)
          if (activeLink) activeLink.classList.add("active")
        }
      })
    },
    {
      root: document.querySelector("main[project-content]"), // scroll container
      threshold: 0.6, // 60% de visibilidad
    }
  )

  sections.forEach((section) => observer.observe(section))
</script>

<style>
  @reference '../styles/global.css';

  article {
    margin: 0;
    height: var(--spacing-full-without-menu); /* Toda la ventana */
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-columns: 200px 1fr; /* Sidebar 200px + body resto */
    grid-template-areas:
      "header header"
      "sidebar body";
  }

  header {
    grid-area: header;
  }

  aside {
    grid-area: sidebar;
    overflow-y: auto; /* Scroll independiente */
  }

  main {
    grid-area: body;
    overflow-y: auto; /* Scroll independiente */
    scroll-behavior: smooth;
    padding-inline: min(16em, 6%);
  }

  :global(section) {
    scroll-margin-top: 0; /* Ajusta este valor para que coincida con el offset del scroll */
  }

  :global(nav a.active) {
    opacity: 1;
    font-weight: bold;
  }

  :global(main.project-content > div) {
    @apply flex flex-col gap-11 text-xl font-roboto text-pretty text-main-0 leading-7;
  }

  :global(main.project-content section) {
    @apply flex flex-col gap-6;
  }

  :global(main.project-content section strong) {
    @apply font-semibold;
  }

  :global(main.project-content section h2) {
    @apply flex items-center gap-1.5 text-2xl font-bold;
  }

  :global(main.project-content section h3) {
    @apply flex items-center gap-1.5 text-xl font-bold;
  }

  :global(main.project-content section ul) {
    @apply list-disc list-outside ml-6;
  }
</style>
